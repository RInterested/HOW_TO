
threshold
[1]  -Inf 0.070 0.115 0.135   Inf

1:length(threshold)
[1] 1 2 3 4 5

for (i in 1:length(threshold)){
cut[i] <- exp(predict(fit,data.frame(s100b=threshold[i]))) / (1 + exp(predict(fit,data.frame(s100b=threshold[i]))))
}


====================================================
=LOOP WITH IF STATEMENT KEEPING TALLY OF SUCCESSES:=
====================================================

suits <- c("spd","hrt","dimd","clbs")
ranks  <- c(1:10,"J","Q","K")
deck <- as.matrix(expand.grid('rank' = ranks, 'suit' = suits))
draw <- function (n) deck[sample(nrow(deck), n), ]
draw(5)

iterations <- 1e5
counter <- 0
for (i in 1:iterations){
s <- draw(5)
if(length(unique(s[ , 1])) == 2) counter <- counter + 1
}
counter/iterations * 100

TYPICAL SET UP WITH A COUNTER OR INDEX i:
----------------------------------------

tosses <- 30
samsize <- 1000
vector <- NULL
for (i in 1:1000){vector[i] = mean(rbinom(samsize,tosses,0.7))}
head(vector)


# A COUNTER (n) will absorb the result of every pass through the loop into an increasingly long vector (sqr.squared):
---------------------------------------------------------------------------------------------------------------------------

sqr = seq(1, 100, by=2)
sqr.squared = NULL
for (n in 1:50){
  sqr.squared[n] = sqr[n]^2
}


str(sqr.squared)
 num [1:50] 1 9 25 49 81 121 169 225 289 361 ...

## A POORLY SET UP COUNTER:
---------------------------

sqr = seq(1, 100, by=2)
sqr.squared = NULL
for (n in 1:50){
  sqr.squared[] = sqr[n]^2              # The empty [ ] is a no-no for these loops.
}
sqr.squared
#numeric(0)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# From Omitted Variables Code (in Simulations) - function "variables" stated before loop:
# A COUNTER FEEDING TWO LOCAL FUNCTIONS WITHIN THE LOOP:
-------------------------------------------------------

coef_x3 <- NULL
coef_x3_full <- NULL
for (i in 1:1000){
  coef_x3[i] = variables()[1]
  coef_x3_full[i] = variables()[2]
}
mean(coef_x3)
mean(coef_x3_full)

======================================================================================================================================

## WITHOUT INDEX / COUNTER:
---------------------------

samples_mean = NULL
for (i in 1 : 1000) samples_mean = c(samples_mean, mean(rnorm(40)))

# Or, exactly the same with <- assignment:

samples_mean = NULL
for (i in 1 : 1000) samples_mean <- c(samples_mean, mean(rnorm(40)))
str(samples_mean)
#Vector [1, 1000]  num [1:1000]
samples_mean
sd(samples_mean)
#[1] 0.1542957

============================================================================================================================================
## ALONG:

sums <- c(2:12)       # All possible sums of two dice.

permutations <- function(sums){
    compis <- numeric()
    for (i in seq(along = sums)){
         C <- compositions(sums[i], m = 2)
    compis[i] <- ncol(as.matrix(C[ ,which(apply(C, 2, function(x){all(0 < x & x < 7)}))]))
    }
    compis <<- compis
    permuts <<- as.matrix(rbind(sums,compis))
}


##OR:

require(lme4)
plot(1,type="n", xlab="", ylab="", xlim=c(0, 12), ylim=c(200, 480))
for (i in sleepstudy$Subject){
    fit<-lm(Reaction ~ Days, sleepstudy[sleepstudy$Subject==i,])
    lines(predict(fit), col=i)
    
    text(x=11, y=predict(fit, data.frame(Days=9)), cex=0.6,labels=i)
}
==============================================================================================================================================

## LOOP THROUGH THE LEVELS OF A CATEGORICAL VARIABLE:
-----------------------------------------------------

require(lme4)

ave_yields <- vector()
for(i in levels(Dyestuff[,1])){
    ave_yields[i] <- mean(Dyestuff[Dyestuff$Batch==i,'Yield'])
}


# Notice that starting the empty vector with 'vector()' avoids an extra entry in the final vector. For instance:

ave_yields <- 0
ave_yields <- vector()
for(i in levels(Dyestuff[,1])){
    ave_yields[i] <- mean(Dyestuff[Dyestuff$Batch==i,'Yield'])
}

# results in 
ave_yields
#        A    B    C    D    E    F 
#   0 1505 1528 1564 1498 1600 1470
# where the first 0 is not really a mean.

===================================================================================================================================================================================

## TWO LOOPS RESULTING IN MULTIPLE PLOTTED LINES:

prmtr <- c(0.6, 1.0, 2.0) # Parameters of the beta distribution.
x <- seq(0, 1, 0.001) # The x axis values
plot(1, type="n", main="Beta Density", 
     ylab = "pdf", xlab = "x", xlim=c(0,1.1), ylim=c(0,3)) # Empty plot - "canvas"
for(i in 1:length(prmtr)){   # We loop through a sequence ("prmtr") that is outside of the loop. And we use it twice.
  for(j in 1:length(prmtr)){
    y <- dbeta(x, shape1=prmtr[i], shape2=prmtr[j])
    lines(y ~ x, col=j)
    text(x=c(0.85,0.87,0.89,0.92,0.94), y = y[x==0.9]+0.01, 
         labels=c("(", prmtr[i], ":", prmtr[j], ")"), 
         col=j, cex=0.7)
  }
}
